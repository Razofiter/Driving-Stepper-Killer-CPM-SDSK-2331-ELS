/**
  ******************************************************************************
  * @file    stm32f1xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  *
  * COPYRIGHT(c) 2019 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32f1xx_hal.h"
#include "stm32f1xx.h"
#include "stm32f1xx_it.h"
#include "usbd_cdc_if.h"

/* External variables --------------------------------------------------------*/
extern PCD_HandleTypeDef hpcd_USB_FS;
extern TIM_HandleTypeDef htim1;
extern volatile uint8_t user_flag_TIMER_registers_update_SET, user_flag_mot_START;
extern uint32_t user_number_of_RCR_overflows;
extern uint32_t user_number_of_RCR_overflows;
extern uint8_t user_remaining_RCR_val;
extern uint32_t user_set_steps, user_set_acc_steps, user_set_dec_steps, guser_set_acc_steps, guser_set_dec_steps;
extern uint8_t user_set_mot_direction;
extern int32_t user_total_steps_performed;
extern volatile uint32_t user_no_of_cc_interrupts;
extern volatile uint32_t user_no_of_pwm_periods_until_change_when_acc;
extern volatile uint32_t user_time_increments_added_to_pwm_period_when_acc;
extern volatile uint32_t user_no_of_pwm_periods_until_change_when_dec;
extern volatile uint32_t user_time_increments_added_to_pwm_period_when_dec;
extern volatile uint32_t user_set_trajectory_repetitions;

extern uint8_t user_flag_steps_to_be_performed_SET,
							 user_flag_distance_to_be_performed_SET,
				user_flag_mot_RPM_SET ,
				user_flag_load_vel_SET ,
				user_flag_elapsed_time_SET,
				user_flag_time_interval_SET,
				user_flag_acc_time_SET ,
				user_flag_dec_time_SET ,
				user_flag_trajectory_repetitions_SET;

extern volatile double user_set_motor_acc_time,
												user_set_motor_dec_time, 
											 user_set_time_elapsed,user_set_time_interval; 


extern uint32_t user_pwm_period ;

extern double user_acc_progression_time_increment;
extern double user_dec_progression_time_increment;

/******************************************************************************/
/*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
/******************************************************************************/

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
  /* USER CODE BEGIN HardFault_IRQn 1 */

  /* USER CODE END HardFault_IRQn 1 */
}

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
  /* USER CODE BEGIN MemoryManagement_IRQn 1 */

  /* USER CODE END MemoryManagement_IRQn 1 */
}

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
  /* USER CODE BEGIN BusFault_IRQn 1 */

  /* USER CODE END BusFault_IRQn 1 */
}

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
  /* USER CODE BEGIN UsageFault_IRQn 1 */

  /* USER CODE END UsageFault_IRQn 1 */
}

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F1xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/**
* @brief This function handles EXTI line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}

/**
* @brief This function handles USB high priority or CAN TX interrupts.
*/
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}

/**
* @brief This function handles TIM1 update interrupt.
*/
void TIM1_UP_IRQHandler(void)
{
//  __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
//	// If we want an update the above flag is FALSE before executing the following line
//	if(!user_flag_TIMER_registers_update_SET)
//	{
//		user_flag_TIMER_registers_update_SET = TRUE;
//	}
//	// Else, we have a RCR overflow event
//	else
//	{
//		// Here we account for the number RCR overflows
//		if(user_number_of_RCR_overflows)
//		{
//			user_number_of_RCR_overflows--;
//			/* Enable the Peripheral */
//			__HAL_TIM_ENABLE(&htim1);
//		}
//		else
//		{
//			if(user_remaining_RCR_val)
//			{
//				if(user_set_steps>MAX_RCR_VAL)
//				{
//					// Because we need to change the value of RCR, an update of TIM1 registres is needed, therefore we change user_flag_TIMER_registers_update_SET to FALSE
//					// and next time the interrupt is fired, we enter the first IF STATEMENT.
//					htim1.Instance->RCR = user_remaining_RCR_val - 1;
//					htim1.Instance->EGR = TIM_EGR_UG;
//					user_flag_TIMER_registers_update_SET = FALSE;
//					user_remaining_RCR_val = 0;
//					/* Enable the Peripheral */
//					__HAL_TIM_ENABLE(&htim1);
//				}
//				else
//				{
//					/* Probabbly this function will be never executed! */
//					user_remaining_RCR_val = 0;
//				}
//			}
//			else
//			{
//				// If this point is reached, that means we finished to perform the number of steps.
//				
//				/* Disable the Capture compare channel */
//				TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);

//				// Change the update TIM1 registers flag back to FALSE for the next motor START procedure
//				user_flag_TIMER_registers_update_SET = FALSE;

//				// We finally update the total number of steps that were performed based on the direction
//				if(user_set_mot_direction == ROTATE_CW)
//					user_total_steps_performed += user_set_steps;
//				else
//					user_total_steps_performed -= user_set_steps;
//			}
//		}
//	}
}

/**
* @brief This function handles TIM1 capture compare interrupt.
*/
void TIM1_CC_IRQHandler(void)
{
//		if(__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1) != RESET)
//		{
//    if(__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC1) !=RESET)
//    {
//        __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1);
//			htim1.Instance->ARR =  (htim1.Instance->ARR - 119);
//			htim1.Instance->CCR1 = (htim1.Instance->ARR+1)/2;
//		}
//	}
//}
	static uint32_t curent_step = 1;

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, FALSE);
		if(__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1) != RESET)
		{
    if(__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_CC1) !=RESET)
    {
        __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1);
			// While the number of user_set_acc_steps is grater than zero, perform steps
			sprintf((char*)user_sendUSBdata,"a:%d,d:%d,p:%d,c:%d\r",user_set_acc_steps, user_set_dec_steps,htim1.Instance->ARR,curent_step);
			CDC_Transmit_FS(user_sendUSBdata,strlen((const char*)user_sendUSBdata));
				if((--user_set_acc_steps) && (curent_step< guser_set_acc_steps))
				{
					if(user_time_increments_added_to_pwm_period_when_acc)
					{
						//htim1.Instance->ARR = htim1.Instance->ARR-100;
						htim1.Instance->ARR =  (htim1.Instance->ARR - user_time_increments_added_to_pwm_period_when_acc);
						htim1.Instance->CCR1 = (htim1.Instance->ARR+1)/2;
					}
					else
					{
						// We continously verify this condition until the ratio
						// user_no_of_pwm_periods_until_change_when_acc =  TIMER_MIN_PERIOD_INCREMENT/incremrnt of progretion
						// reaches 0
						if(--user_no_of_pwm_periods_until_change_when_acc==0) 
						{
							htim1.Instance->ARR -=  1;	// (one from one time increment)
							htim1.Instance->CCR1 /= htim1.Instance->ARR;
							//HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, FALSE);
							// We assign again the value to be decrement inside this condition 
							user_no_of_pwm_periods_until_change_when_acc = TIMER_MIN_PERIOD_INCREMENT/user_acc_progression_time_increment;
						}
					}
					
					//user_set_steps--;
					//user_set_acc_steps--;
					curent_step++;
//					sprintf((char*)user_sendUSBdata,"a:%d,p:%d,c:%d\r",user_set_acc_steps, htim1.Instance->ARR,curent_step);
//					CDC_Transmit_FS(user_sendUSBdata,strlen((const char*)user_sendUSBdata));
					
				}
				// Else check to see if we have to perform steps with constant vel if the
				// user_set_acc_steps + user_set_dec_steps is smaller than the user_set_
				else
				{
					//if(htim1.Instance->ARR == user_pwm_period && (curent_step == user_set_acc_steps))
					//if(curent_step == user_set_acc_steps)
					//{
						// If we have to perform constant velocity for a given time
						if(user_set_time_interval-user_set_motor_acc_time-user_set_motor_dec_time)
						{
							sprintf((char*)user_sendUSBdata,"Ct vel?\r");
							CDC_Transmit_FS(user_sendUSBdata,strlen((const char*)user_sendUSBdata));
							// If yes, we chack to see if we reached the necessary number of steps to be performed during
							// the time = user_set_time_increment-user_set_motor_acc_time-user_set_motor_dec_time
							if(curent_step == (user_set_steps - user_set_dec_steps))
							{
								sprintf((char*)user_sendUSBdata,"Decc?\r");
								CDC_Transmit_FS(user_sendUSBdata,strlen((const char*)user_sendUSBdata));
								if(user_set_dec_steps>1)
								{
									// If the total number of steps is NOT reached, perform them
									if(user_time_increments_added_to_pwm_period_when_dec)
									{
										htim1.Instance->ARR +=  (user_time_increments_added_to_pwm_period_when_dec);
										htim1.Instance->CCR1 = ((htim1.Instance->ARR)+1)/2;
										
									}
									else
									{
										// We continously verify this condition until the ratio
										// user_no_of_pwm_periods_until_change_when_acc =  TIMER_MIN_PERIOD_INCREMENT/incremrnt of progretion
										// reaches 0
										if(--user_no_of_pwm_periods_until_change_when_dec==0) 
										{
											htim1.Instance->ARR +=  1;	// (one from one time increment)
											htim1.Instance->CCR1 = ((htim1.Instance->ARR)+1)/2;
											// We assign again the value to be decrement inside this condition 
											user_no_of_pwm_periods_until_change_when_dec = TIMER_MIN_PERIOD_INCREMENT/user_dec_progression_time_increment;
											curent_step++;
										}
									}
									curent_step++;
									user_set_dec_steps--;
									sprintf((char*)user_sendUSBdata,"d:%d,p:%d,c:%d\r",user_set_dec_steps, htim1.Instance->ARR,curent_step);
									CDC_Transmit_FS(user_sendUSBdata,strlen((const char*)user_sendUSBdata));
								} 
							}
							// Else we have to perform a given number of steps in constant vel mode, just DO THEM
							else
							{
								curent_step++;	
							}								
						}
						// Else decelarate directly if it is the case
						else
						{
							if(user_set_dec_steps>0)
							{
									// If the total number of steps is reached stop EVERYTHING
									if(curent_step == user_set_dec_steps)
									{
										HAL_GPIO_WritePin(M3_ROT_GPIO_Port,M3_ROT_Pin, BACKWARD);
										/* Disable the Peripheral */
										curent_step++;
									}
									else
									{
										if(--user_set_dec_steps)
										{
									// If the total number of steps is NOT reached, perform them
									if(user_time_increments_added_to_pwm_period_when_dec)
									{
										htim1.Instance->ARR +=  (user_time_increments_added_to_pwm_period_when_dec);
										htim1.Instance->CCR1 = (htim1.Instance->ARR+1)/2;
										
									}
									else
									{
										// We continously verify this condition until the ratio
										// user_no_of_pwm_periods_until_change_when_acc =  TIMER_MIN_PERIOD_INCREMENT/incremrnt of progretion
										// reaches 0
										if(--user_no_of_pwm_periods_until_change_when_dec==0) 
										{
											htim1.Instance->ARR +=  1;	// (one from one time increment)
											htim1.Instance->CCR1 = ((htim1.Instance->ARR)+1)/2;
											// We assign again the value to be decrement inside this condition 
											user_no_of_pwm_periods_until_change_when_dec = TIMER_MIN_PERIOD_INCREMENT/user_dec_progression_time_increment;
											curent_step++;
										}
									}
									//user_set_dec_steps--;
									curent_step++;
								}
								else
								{
									// If the total number of steps is reached stop EVERYTHING
									if(curent_step == (user_set_steps))
									{
										if(--user_set_trajectory_repetitions)
										{
											HAL_GPIO_WritePin(M3_ROT_GPIO_Port,M3_ROT_Pin, FORWARD);
											user_set_acc_steps = guser_set_acc_steps;
											user_set_dec_steps = guser_set_dec_steps;
											curent_step = 1;
										}
										else
										{
											/* Disable the Peripheral */
											HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
										}
										//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, FALSE);
									}

								}
							}
//									user_set_dec_steps--;
//									sprintf((char*)user_sendUSBdata,"d:%d,p:%d,c:%d\r",user_set_dec_steps, htim1.Instance->ARR,curent_step);
//									CDC_Transmit_FS(user_sendUSBdata,strlen((const char*)user_sendUSBdata));
								}
								else
								{
									// If the total number of steps is reached stop EVERYTHING
									if(curent_step == (user_set_steps))
									{
										/* Disable the Peripheral */
										sprintf((char*)user_sendUSBdata,"Stop in cmpl mode\r");
										CDC_Transmit_FS(user_sendUSBdata,strlen((const char*)user_sendUSBdata));
										HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
									}
								}
						}
					}
//			else
//			{
//				// If the total number of steps is reached stop EVERYTHING
//					/* Disable the Peripheral */
//					curent_step = 0;					
//					HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
//			}
		}
	}
}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
